from aiogram import Dispatcher, types
from utils import db1
from keyboard.user_kb import kb_client, inline_kb


async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–Ω—è—Ç—å —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –û–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ"
                         " –∞–Ω–µ–∫–¥–æ—Ç—ã, –∞ —Ç—ã –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –º–æ–∂–µ—à—å –ø–æ—Å–º–µ—è—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ü—Ä–∏—Å—Ç—É–ø–∏–º...",
                         reply_markup=kb_client)


async def send_joke(message: types.Message):
    global joke_id
    joke = db1.select_joke()
    joke_id = joke[0]
    joke_text = joke[1]
    await message.answer(joke_text, reply_markup=inline_kb)


async def send_fav_joke(message: types.Message):
    await message.answer(db1.select_fav_joke()[0], reply_markup=kb_client)


async def save_joke(call: types.CallbackQuery):
    await call.message.answer('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æüëç')
    db1.upd_fav_joke(joke_id)
    await call.answer()


def register_user_handlers(dp:Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 's'])
    dp.register_message_handler(send_joke, commands=['–°–ª—É—á–∞–π–Ω—ã–π_–∞–Ω–µ–∫–¥–æ—ÇüòÑ', 'random'])
    dp.register_message_handler(send_fav_joke, commands=['–ê–Ω–µ–∫–¥–æ—Ç_–∏–∑_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö‚≠ê', 'fav'])
    dp.register_callback_query_handler(save_joke, text='save_joke')




