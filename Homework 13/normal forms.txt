Определения

Реляционная база данных – это наборы данных, связанных между собой определёнными отношениями.Реляционные базы данных
основаны на реляционной модели — интуитивно понятном, наглядном табличном способе представления данных. Каждая строка,
содержащая в таблице такой базы данных, представляет собой запись с уникальным идентификатором, который называют ключом.
Столбцы таблицы имеют атрибуты данных, а каждая запись обычно содержит значение для каждого атрибута, что дает
возможность легко устанавливать взаимосвязь между элементами данных.

Нормализация – это процесс удаления избыточных данных, а также метод проектирования базы данных, который позволяет
привести базу данных к минимальной избыточности.

Декомпозиция – это процесс разбиения одного отношения (таблицы) на несколько.

Избыточность данных – это когда одни и те же данные хранятся в базе в нескольких местах, именно это и приводит
к аномалиям.

Нормальная форма базы данных – это набор правил и критериев, которым должна отвечать база данных.

Процесс нормализации – это последовательный процесс приведения базы данных к эталонному виду, т.е. переход от одной
нормальной формы к следующей.

Ключ – это столбец или набор столбцов, по которым гарантировано можно отличить строки друг от друга, т.е. ключ
идентифицирует каждую строку таблицы. По ключу мы можем обратиться к конкретной строке данных в таблице. Таблица должна
иметь правильный ключ, по которому можно идентифицировать каждую строку.

Транзитивная зависимость – это когда неключевые столбцы зависят от значений других неключевых столбцов.

Декомпозиция без потерь – процесс разбиения одной таблицы на несколько, при условии, что в случае соединения таблиц,
которые были получены в результате декомпозиции, будет формироваться ровно та же самая информация, что и в исходной
таблице до декомпозиции.


Нормальные формы базы данных
В целом процесс нормализации базы данных выглядит следующим образом: мы, следуя определённым правилам и соблюдая
определенные требования, проектируем таблицы в базе данных.При этом все эти правила и требования можно сгруппировать в
несколько наборов, и если спроектировать базу данных с соблюдением всех правил и требований, которые включаются в тот
или иной набор, то база данных будет находиться в определённом состоянии, т.е. форме, и такая форма называется
нормальная форма базы данных.


Каждая следующая нормальная форма содержит более строгие правила и критерии, тем самым приводя базу данных к
определённой нормальной форме мы устраняем определённый набор аномалий.
Отсюда можно сделать вывод, что чем выше нормальная форма, тем меньше аномалий в базе будет.

Иными словами, процесс перехода от одной нормальной формы к следующей – это усовершенствование базы данных. Так как если
база данных находится в какой-то определённой нормальной форме – это означает, что в базе данных отсутствует
определенный вид аномалий.

! Существует 5 основных нормальных форм базы данных:

Первая нормальная форма (1NF)
Вторая нормальная форма (2NF)
Третья нормальная форма (3NF)
Четвертая нормальная форма (4NF)
Пятая нормальная форма (5NF)

Однако выделяют еще дополнительные нормальные формы:

Ненормализованная форма или нулевая нормальная форма (UNF)
Нормальная форма Бойса-Кодда (BCNF)
Доменно-ключевая нормальная форма (DKNF)
Шестая нормальная форма (6NF)

База данных считается нормализованной, если она находится как минимум в третьей нормальной форме (3NF).
В реальном мире нормализация до третьей нормальной формы (3NF) является обычной, стандартной практикой, так как 3NF
устраняет достаточное количество аномалий, при этом производительность базы данных, а также удобство ее использования
не снижается, что нельзя сказать о всех последующих формах.

Ситуации, при которых требуется нормализовать базу данных до четвертой нормальной формы (4NF), в реальном мире
встречаются достаточно редко.

Требования первой нормальной формы (1NF):
В таблице не должно быть дублирующих строк
В каждой ячейке таблицы хранится атомарное значение (одно не составное значение)
В столбце хранятся данные одного типа
Отсутствуют массивы и списки в любом виде

Требования второй нормальной формы (2NF):
Таблица должна находиться в первой нормальной форме
Таблица должна иметь ключ
Все неключевые столбцы таблицы должны зависеть от полного ключа (в случае если он составной)

Требование третьей нормальной формы (3NF) заключается в том, чтобы в таблицах отсутствовала транзитивная зависимость.

В третьей нормальной форме все наше внимание уделено столбцам, которые не являются первичным ключом, т.е.
неключевым столбцам.Чтобы нормализовать базу данных до третьей нормальной формы, необходимо сделать так, чтобы в
таблицах отсутствовали неключевые столбцы, которые зависят от других неключевых столбцов.


Требования нормальной формы Бойса-Кодда следующие:

Таблица должна находиться в третьей нормальной форме. Здесь все как обычно, т.е. как и у всех остальных нормальных форм,
первое требование заключается в том, чтобы таблица находилась в предыдущей нормальной форме, в данном случае в третьей
нормальной форме; Ключевые атрибуты составного ключа не должны зависеть от неключевых атрибутов.
Отсюда следует, что требования нормальной формы Бойса-Кодда предъявляются только к таблицам, у которых первичный ключ
составной. Таблицы, у которых первичный ключ простой, и они находятся в третьей нормальной форме, автоматически
находятся и в нормальной форме Бойса-Кодда.

Главное правило нормальной формы Бойса-Кодда (BCNF) звучит следующим образом:
Часть составного первичного ключа не должна зависеть от неключевого столбца.


Требование четвертой нормальной формы (4NF) заключается в том, чтобы в таблицах отсутствовали нетривиальные многозначные
зависимости.

В таблицах многозначная зависимость выглядит следующим образом.

Начнем с того, что таблица должна иметь как минимум три столбца, допустим A, B и C, при этом B и C между собой никак не
связаны и не зависят друг от друга, но по отдельности зависят от A, и для каждого значения A есть множество значений B,
а также множество значений C.

В данном случае многозначная зависимость обозначается вот так:
A —> B
A —> C
Если подобная многозначная зависимость есть в таблице, то она не соответствует четвертой нормальной форме.

Требования пятой нормальной формы (5NF)
Переменная отношения находится в пятой нормальной форме (иначе – в проекционно-соединительной нормальной форме) тогда и
только тогда, когда каждая нетривиальная зависимость соединения в ней определяется потенциальным ключом (ключами) этого
отношения.

Требование пятой нормальной формы (5NF) заключается в том, чтобы в таблице каждая нетривиальная зависимость соединения
определялась потенциальным ключом этой таблицы.

Требования доменно-ключевой нормальной формы (DKNF)
Ограничение домена – это ограничение, предписывающее использование для определенного атрибута значений только из
некоторого заданного домена (набора значений).

Ограничение ключа – это ограничение, утверждающее, что некоторый атрибут или комбинация атрибутов представляет собой
потенциальный ключ. Таким образом, требование доменно-ключевой нормальной формы заключается в том, чтобы каждое
наложенное ограничение на таблицу являлось логическим следствием ограничений доменов и ограничений ключей, которые
накладываются на данную таблицу.Таблица, находящаяся в доменно-ключевой нормальной форме, обязательно находится в 5NF,
и соответственно, в 4NF и т.д. Однако, стоит отметить, что не всегда возможно привести таблицу к доменно-ключевой
нормальной форме, более того, не всегда возможно получить ответ на вопрос о том, когда может быть выполнено такое
приведение.

Шестая нормальная форма (6NF) была введена при работе с хронологическими базами данных.

Хронологическая база данных – это база, которая может хранить не только текущие данные, но и исторические данные, т.е.
данные, относящиеся к прошлым периодам времени. Однако такая база может хранить и данные, относящиеся к будущим периодам
времени.

В процессе проектирования хронологических баз данных возникают некоторые особые проблемы, решить которые можно с
помощью: горизонтальной декомпозиции и вертикальной декомпозиции.


Требование шестой нормальной формы заключается в том, что таблица должна удовлетворять всем нетривиальным зависимостям
соединения.

Из этого определения следует, что таблица находится в 6NF, когда она неприводима, то есть не может быть подвергнута
дальнейшей декомпозиции без потерь. Стоит отметить, что таблица, которая находится в 6NF, также находится и в 5NF, и во
всех предыдущих.

Шестая нормальная форма вводит такое понятие как «Декомпозиция до конца», т.е. максимально возможная декомпозиция
таблиц.

Однако, если в хронологических базах данных такая нормализация может быть полезна, так как она позволяет бороться с
избыточностью, то в нехронологических базах данных нормализация таблиц до шестой нормальной формы приведёт к
значительному снижению производительности. Кроме этого такая нормализация сделает работу с базой данных очень сложной
за счет многократного увеличения количества таблиц.

Поэтому шестую нормальную форму в реальном мире не используют, более того, трудно даже представить себе ситуацию, при
которой возникала бы необходимость нормализовать базу данных до шестой нормальной формы. Практического применения шестой
нормальной формы, наверное, просто нет.

О пределах нормализации
Процесс проектирования правильной базы данных – это не процесс приведения ее к самой высокой нормальной форме, это
компромисс между отсутствием аномалий и приемлемой производительностью.
И если говорить о реальных данных, то нормализация до четвертой нормальной формы, как и до всех последующих, в
современном мире практически не встречается. Если четвертую нормальную форму еще как-то можно представить и даже
встретить данные, нормализованные до этой формы, то встретить данные, нормализованные до 5 или 6 нормальной формы,
практически невозможно.

Да, нормализация повышает производительность, но только где-то до 3 нормальной формы. Начиная с 4 нормальной формы,
производительность увеличиваться не будет, более того, с каждой новой формой производительность будет значительно
снижаться, не говоря уже о том, что с нормализованной базой данных до 5 или 6 нормальной формы будет крайне сложно и
неудобно работать и сопровождать ее, ведь с каждой новой формой мы значительно увеличиваем количество таблиц в базе
данных.

Поэтому процесс нормализации не является строго обязательным, т.е. не нужно нормализовать базу данных, только для того
чтобы она была нормализована.

В процессе проектирования базы данных необходимо следовать здравому смыслу и найти баланс между отсутствием аномалий и
приемлемой производительностью.

Полностью нормализованная база данных – это плохая база данных.

Хорошая база данных – это база, которая достаточно нормализована, чтобы не создавать аномалии для пользователей этой
базы данных, и в то же время она имеет хорошую производительность.